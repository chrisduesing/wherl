#!/usr/bin/env escript
-export([main/1]).

-include_lib("kernel/include/file.hrl").

main(Something) when is_list(Something) ->
    [Command | Args] = Something,
    case Command of
	"new" ->
	    handle(Command, Args);
	"help" ->
	    handle(Command, Command);
	_ ->
	    case app_created() of
		true ->
		    handle(Command, Args);
		false ->
		    io:format("You must create an app before you can do anything else.~n\tusage: wherl new <name> <abbreviation>~n",[])
	    end
    end;	

main(_) ->
    io:format("usage: wherl generate <command> <argument>. try wherl help for a list of commands.~n",[]).	

%%%===================================================================
%%% API
%%%===================================================================
handle("new", Args) ->
    case (length(Args)) of
	1 ->
	    [App] = Args,
	    new_app(App, "");
	2 ->  
	    [App | Rest] = Args,
	    [Abbrev] = Rest,
	    new_app(App, Abbrev);
	_ ->
	    io:format("usage: wherl new <name> <abbreviation>~n \tname: name of the application~n \tabbreviation: since erlang is not namespaced, a short (1-4 character) prefix can be appended to each module to avoid name clashes.~n",[]) %
    end;

handle("generate", ["controller" | Rest]) ->
    case (length(Rest) == 1) of
	true ->
	    Name = string:strip(Rest),
	    io:format("generating controller ~s~n",[Name]);
	false ->	
	    io:format("usage: wherl generate controller <name>~n",[])
    end;

handle("generate", ["model" | Rest]) ->
    case (length(Rest) == 0) of
	true ->
	    io:format("usage: wherl generate model <name>~n",[]);
	false ->	
	    [Name | Fields] = Rest,
	    io:format("~ngenerating model ~s~n",[Name]),
	    model(Name, Fields)
    end;

handle("generate", ["scaffold" | Rest]) ->
    case (length(Rest) == 1) of
	true ->
	    Name = string:strip(Rest),
	    io:format("generating model and controller ~s~n",[Name]);
	false ->	
	    io:format("usage: wherl generate <command> <args>~n",[])
    end;

handle(_, _) ->
    io:format("usage: wherl <command> <args>~n \tcommands:~n \t\tnew - create a new application~n \t\tgenerate - make a new model or controller~n",[]).

%%%===================================================================
%%% Template generation
%%%===================================================================
new_app(App, Abbrev) ->
    io:format("~nwherl: creating new app ~s~n",[App]),
    config(App, Abbrev, []),
    create_dir(App), 
    rebar_create(App, App),
    hrl(App),
    util(App),
    rebar_compile().

config(App, Abbrev, Models) ->
    {ok, ConfigFile} = create_file("config/wherl.config"),
    file:write(ConfigFile, io_lib:fwrite("~p.\n",[{app, App}])),
    file:write(ConfigFile, io_lib:fwrite("~p.\n",[{abbrev, Abbrev}])),
    file:write(ConfigFile, io_lib:fwrite("~p.\n",[{models, Models}])).

rebar_create(App, AppDir) ->
    os:cmd("cp rebar " ++ AppDir),
    Cmd = "cd " ++ AppDir ++ "; ./rebar create-app appid=" ++ App,
    io:format("rebar:~n~s~n", [os:cmd(Cmd)]).

hrl(App) ->
    FileName = lists:flatten([App, "/include/", App, ".hrl"]),
    {ok, HrlFile} = create_file(FileName),
    file:write(HrlFile, "").
    
model(Model, Fields) ->
    Properties = model_properties(Model, Fields),
    TemplateFileName = "model.tmp",
    Data = template(TemplateFileName, Properties),
    FileName = lists:flatten([app_name(), "/src/", Model, ".erl"]),
    {ok, ModelFile} = create_file(FileName),
    file:write(ModelFile, Data),
    wh_record(Properties),
    store(Model, Properties),
    {App, Abbrev, Models} = app_props(),
    config(App, Abbrev, [Model | Models]),
    rebar_compile().

wh_record(Properties) ->
    App = app_name(),
    TemplateFileName = "record.tmp",
    Data = template(TemplateFileName, Properties),
    HrlFileName = lists:flatten([App, "/include/", App, ".hrl"]),
    {ok, HrlFile} = create_file(HrlFileName, [write, append]),
    file:write(HrlFile, Data).

store(Model, Properties) ->
    TemplateFileName = "store.tmp",
    Data = template(TemplateFileName, Properties),
    FileName = lists:flatten([app_name(), "/src/", Model, "_store.erl"]),
    {ok, File} = create_file(FileName),
    file:write(File, Data).

util(App) ->
    Properties = [{app, App}],
    TemplateFileName = "util.tmp",
    Data = template(TemplateFileName, Properties),
    FileName = lists:flatten([App, "/src/", App, "_util.erl"]),
    {ok, File} = create_file(FileName),
    file:write(File, Data).

%%%===================================================================
%%% Utility functions
%%%===================================================================


template(TemplateFileName, Properties) ->
    CurrentDirectory = filename:dirname(escript:script_name()),
    true = code:add_pathz(CurrentDirectory ++ "/include/sgte/ebin/"),
    FileName = lists:flatten([CurrentDirectory, "/templates/", TemplateFileName]),
    {ok, Compiled} = sgte:compile_file(FileName),
    sgte:render_bin(Compiled, Properties).

create_file(FileNameAndPath) ->
    create_file(FileNameAndPath, [write]).

create_file(FileNameAndPath, Options) ->
    Index = string:rchr(FileNameAndPath, $/),
    Path = string:substr(FileNameAndPath, 1, Index - 1),
    create_dir(Path),
    CurrentDirectory = filename:dirname(escript:script_name()),
    FullFileName = lists:flatten([CurrentDirectory, "/", FileNameAndPath]),
    {ok, File} = file:open(FullFileName, Options),
    io:format("writing file:  ~s~n",[FullFileName]),
    {ok, File}.

create_dir(Path) ->
    CurrentDirectory = filename:dirname(escript:script_name()),
    lists:foldl(fun(Directory, PathSoFar) -> 
			NewDir = lists:flatten([PathSoFar, "/", Directory]),
			file:make_dir(CurrentDirectory ++ NewDir), 		
			NewDir
		end, "", string:tokens(Path, "/ ")).

app_name() ->
    PropList = app_raw_proplist(),
    {app, AppName} = lists:keyfind(app, 1, PropList),
    AppName.

app_props() ->
    PropList = app_raw_proplist(),
    {app, App} = lists:keyfind(app, 1, PropList),
    {abbrev, Abbrev} = lists:keyfind(abbrev, 1, PropList),
    {models, Models} = lists:keyfind(models, 1, PropList),
    {App, Abbrev, Models}.

app_raw_proplist() ->
    CurrentDirectory = filename:dirname(escript:script_name()),
    Filename = CurrentDirectory ++ "/config/wherl.config",
    {ok, PropList} = file:consult(Filename),
    PropList.

app_created() ->
    CurrentDirectory = filename:dirname(escript:script_name()),
    Filename = CurrentDirectory ++ "/config/wherl.config",
    {Result, _} = file:read_file_info(Filename),
    Result == ok.

rebar_compile() ->
    Cmd = "cd " ++ app_name() ++ "; ./rebar compile",
    io:format("rebar:~n~s~n", [os:cmd(Cmd)]).

model_properties(Model, Fields) ->
    FieldTitleList = string:sub_string(lists:flatten([ ", " ++ title(F) || F <- Fields ]), 3),
    FieldRecordList = string:sub_string(lists:flatten([ ", " ++ F ++ "=" ++ title(F) || F <- Fields ]), 3),
    FieldList = string:sub_string(lists:flatten([ ", " ++ F || F <- Fields ]), 3),
    [{model, Model}, 
     {'Model', title(Model)},
     {app, app_name()},
     {field_count, length(Fields)},
     {field_title_list, FieldTitleList},
     {field_list, FieldList},
     {field_record_list, FieldRecordList},
     {abbrev, ""}].

title([H|T]) -> 
    [string:to_upper(H)| T].
